"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/analytics/page",{

/***/ "(app-pages-browser)/./lib/analytics.ts":
/*!**************************!*\
  !*** ./lib/analytics.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAnalyticsData: function() { return /* binding */ getAnalyticsData; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase/client */ \"(app-pages-browser)/./lib/supabase/client.ts\");\n\nasync function getAnalyticsData() {\n    const supabase = (0,_lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.createClient)();\n    try {\n        // Get popular items with their menu details\n        const { data: orders, error: ordersError } = await supabase.from(\"orders\").select(\"\\n        id,\\n        quantity,\\n        created_at,\\n        menu_item:menu_item_id (\\n          name,\\n          price\\n        )\\n      \").order(\"created_at\", {\n            ascending: false\n        }).limit(100);\n        if (ordersError) throw ordersError;\n        // Process popular items data\n        const itemStats = (orders || []).reduce((acc, order)=>{\n            if (!order.menu_item) return acc;\n            const itemName = order.menu_item.name;\n            const price = order.menu_item.price;\n            const quantity = order.quantity;\n            if (!acc[itemName]) {\n                acc[itemName] = {\n                    count: 0,\n                    revenue: 0\n                };\n            }\n            acc[itemName].count += quantity;\n            acc[itemName].revenue += price * quantity;\n            return acc;\n        }, {});\n        const processedPopularItems = Object.entries(itemStats).map((param)=>{\n            let [name, { count, revenue }] = param;\n            return {\n                name,\n                orderCount: count,\n                revenue\n            };\n        }).sort((a, b)=>b.orderCount - a.orderCount).slice(0, 10);\n        // Get order patterns (last 30 days)\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n        const { data: recentOrders, error: recentOrdersError } = await supabase.from(\"orders\").select(\"\\n        id,\\n        quantity,\\n        created_at,\\n        menu_item:menu_item_id (\\n          price\\n        )\\n      \").gte(\"created_at\", thirtyDaysAgo.toISOString()).order(\"created_at\", {\n            ascending: true\n        });\n        if (recentOrdersError) throw recentOrdersError;\n        // Process order patterns data\n        const dailyOrders = (recentOrders || []).reduce((acc, order)=>{\n            if (!order.menu_item) return acc;\n            const date = new Date(order.created_at).toISOString().split(\"T\")[0];\n            if (!acc[date]) {\n                acc[date] = {\n                    count: 0,\n                    revenue: 0\n                };\n            }\n            acc[date].count += order.quantity;\n            acc[date].revenue += order.menu_item.price * order.quantity;\n            return acc;\n        }, {});\n        const processedOrderPatterns = Object.entries(dailyOrders).map((param)=>{\n            let [date, { count, revenue }] = param;\n            return {\n                date,\n                orderCount: count,\n                revenue\n            };\n        }).sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n        // Get customer growth (last 30 days)\n        const { data: customers, error: customersError } = await supabase.from(\"customers\").select(\"created_at\").gte(\"created_at\", thirtyDaysAgo.toISOString()).order(\"created_at\", {\n            ascending: true\n        });\n        if (customersError) throw customersError;\n        // Process customer growth data\n        const dailyCustomers = (customers || []).reduce((acc, customer)=>{\n            const date = new Date(customer.created_at).toISOString().split(\"T\")[0];\n            if (!acc[date]) {\n                acc[date] = {\n                    new: 0\n                };\n            }\n            acc[date].new += 1;\n            return acc;\n        }, {});\n        let totalCustomers = 0;\n        const processedCustomerGrowth = Object.entries(dailyCustomers).map((param)=>{\n            let [date, { new: newCustomers }] = param;\n            totalCustomers += newCustomers;\n            return {\n                date,\n                newCustomers,\n                totalCustomers\n            };\n        }).sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n        // Return empty data if no records found\n        if (processedPopularItems.length === 0 && processedOrderPatterns.length === 0 && processedCustomerGrowth.length === 0) {\n            return {\n                popularItems: [],\n                orderPatterns: [],\n                customerGrowth: []\n            };\n        }\n        return {\n            popularItems: processedPopularItems,\n            orderPatterns: processedOrderPatterns,\n            customerGrowth: processedCustomerGrowth\n        };\n    } catch (error) {\n        console.error(\"Error fetching analytics data:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/analytics.ts\n"));

/***/ })

});