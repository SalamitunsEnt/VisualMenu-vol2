"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/set-admin/page",{

/***/ "(app-pages-browser)/./app/admin/set-admin.ts":
/*!********************************!*\
  !*** ./app/admin/set-admin.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setAdminAccess: function() { return /* binding */ setAdminAccess; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase/client */ \"(app-pages-browser)/./lib/supabase/client.ts\");\n\nasync function setAdminAccess(email) {\n    const supabase = (0,_lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.createClient)();\n    console.log(\"Starting admin access setup for:\", email);\n    try {\n        // First check if the roles table exists and has data\n        const { data: rolesCheck, error: rolesCheckError } = await supabase.from(\"roles\").select(\"id\", {\n            count: \"exact\"\n        }).limit(1);\n        if (rolesCheckError) {\n            console.error(\"Error checking roles table:\", rolesCheckError);\n            throw new Error(\"Failed to check roles table. Error: \" + rolesCheckError.message);\n        }\n        if (!rolesCheck || rolesCheck.length === 0) {\n            throw new Error(\"Roles table is empty. Please run the migrations first.\");\n        }\n        console.log(\"Roles table check:\", rolesCheck);\n        // Get the owner role ID\n        const { data: roleData, error: roleError } = await supabase.from(\"roles\").select(\"id, name, description\").eq(\"name\", \"owner\").single();\n        if (roleError) {\n            console.error(\"Error getting owner role:\", roleError);\n            throw new Error(\"Failed to get owner role. Error: \" + roleError.message);\n        }\n        if (!roleData) {\n            throw new Error(\"Owner role not found. Please run the migrations first.\");\n        }\n        console.log(\"Found owner role:\", roleData);\n        // Get the current user's session\n        const { data: { user }, error: sessionError } = await supabase.auth.getUser();\n        if (sessionError) {\n            console.error(\"Error getting session:\", sessionError);\n            throw new Error(\"Failed to get session. Error: \" + sessionError.message);\n        }\n        if (!user) {\n            throw new Error(\"No authenticated user found. Please log in again.\");\n        }\n        console.log(\"Got current user:\", user);\n        // Try to create user record directly\n        const { error: createError } = await supabase.from(\"users\").upsert([\n            {\n                id: user.id,\n                email: user.email,\n                role_id: roleData.id\n            }\n        ], {\n            onConflict: \"id\",\n            ignoreDuplicates: false\n        });\n        if (createError) {\n            console.error(\"Error upserting user record:\", createError);\n            throw new Error(\"Failed to upsert user record. Error: \" + createError.message);\n        }\n        console.log(\"Upserted user record\");\n        // Update user's metadata\n        const { error: updateError } = await supabase.auth.updateUser({\n            data: {\n                role: \"owner\",\n                role_id: roleData.id,\n                isAdmin: true,\n                permissions: [\n                    \"menu:create\",\n                    \"menu:read\",\n                    \"menu:update\",\n                    \"menu:delete\",\n                    \"orders:create\",\n                    \"orders:read\",\n                    \"orders:update\",\n                    \"analytics:read\",\n                    \"users:manage\"\n                ]\n            }\n        });\n        if (updateError) {\n            console.error(\"Error updating user:\", updateError);\n            throw new Error(\"Failed to update user. Error: \" + updateError.message);\n        }\n        console.log(\"Updated user metadata\");\n        // Refresh the session to apply changes\n        const { error: refreshError } = await supabase.auth.refreshSession();\n        if (refreshError) {\n            console.error(\"Error refreshing session:\", refreshError);\n            throw new Error(\"Failed to refresh session. Error: \" + refreshError.message);\n        }\n        console.log(\"Successfully refreshed session\");\n        // Final verification\n        const { data: finalCheck, error: finalCheckError } = await supabase.auth.getUser();\n        if (finalCheckError) {\n            console.error(\"Error in final verification:\", finalCheckError);\n            throw new Error(\"Failed final verification. Error: \" + finalCheckError.message);\n        }\n        console.log(\"Final user state:\", finalCheck);\n        return {\n            success: true,\n            message: \"Successfully set admin access\",\n            data: finalCheck\n        };\n    } catch (error) {\n        console.error(\"Error in setAdminAccess:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/admin/set-admin.ts\n"));

/***/ })

});