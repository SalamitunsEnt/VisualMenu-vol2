"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/set-admin/page",{

/***/ "(app-pages-browser)/./app/admin/set-admin.ts":
/*!********************************!*\
  !*** ./app/admin/set-admin.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setAdminAccess: function() { return /* binding */ setAdminAccess; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase/client */ \"(app-pages-browser)/./lib/supabase/client.ts\");\n\nasync function setAdminAccess(email) {\n    const supabase = (0,_lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.createClient)();\n    console.log(\"Starting admin access setup for:\", email);\n    try {\n        // First check if the roles table exists and has data\n        const { data: rolesCheck, error: rolesCheckError } = await supabase.from(\"roles\").select(\"id\", {\n            count: \"exact\"\n        }).limit(1);\n        if (rolesCheckError) {\n            console.error(\"Error checking roles table:\", rolesCheckError);\n            throw new Error(\"Failed to check roles table. Error: \" + rolesCheckError.message);\n        }\n        if (!rolesCheck || rolesCheck.length === 0) {\n            throw new Error(\"Roles table is empty. Please run the migrations first.\");\n        }\n        console.log(\"Roles table check:\", rolesCheck);\n        // Get the owner role ID\n        const { data: roleData, error: roleError } = await supabase.from(\"roles\").select(\"id, name, description\").eq(\"name\", \"owner\").single();\n        if (roleError) {\n            console.error(\"Error getting owner role:\", roleError);\n            throw new Error(\"Failed to get owner role. Error: \" + roleError.message);\n        }\n        if (!roleData) {\n            throw new Error(\"Owner role not found. Please run the migrations first.\");\n        }\n        console.log(\"Found owner role:\", roleData);\n        // Get the current user's session\n        const { data: { user }, error: sessionError } = await supabase.auth.getUser();\n        if (sessionError) {\n            console.error(\"Error getting session:\", sessionError);\n            throw new Error(\"Failed to get session. Error: \" + sessionError.message);\n        }\n        if (!user) {\n            throw new Error(\"No authenticated user found. Please log in again.\");\n        }\n        console.log(\"Got current user:\", user);\n        // Check if user exists in users table\n        const { data: existingUser, error: checkError } = await supabase.from(\"users\").select(\"id\").eq(\"id\", user.id).single();\n        if (checkError && checkError.code !== \"PGRST116\") {\n            console.error(\"Error checking user existence:\", checkError);\n            throw new Error(\"Failed to check user existence. Error: \" + checkError.message);\n        }\n        if (!existingUser) {\n            // Create user record if it doesn't exist\n            const { error: createError } = await supabase.from(\"users\").insert([\n                {\n                    id: user.id,\n                    email: user.email,\n                    role_id: roleData.id\n                }\n            ]);\n            if (createError) {\n                console.error(\"Error creating user record:\", createError);\n                throw new Error(\"Failed to create user record. Error: \" + createError.message);\n            }\n            console.log(\"Created new user record\");\n        } else {\n            // Update existing user's role_id\n            const { error: updateRoleError } = await supabase.from(\"users\").update({\n                role_id: roleData.id\n            }).eq(\"id\", user.id);\n            if (updateRoleError) {\n                console.error(\"Error updating role_id:\", updateRoleError);\n                throw new Error(\"Failed to update role_id. Error: \" + updateRoleError.message);\n            }\n            console.log(\"Updated role_id in users table\");\n        }\n        // Update user's metadata\n        const { error: updateError } = await supabase.auth.updateUser({\n            data: {\n                role: \"owner\",\n                role_id: roleData.id,\n                isAdmin: true,\n                permissions: [\n                    \"menu:create\",\n                    \"menu:read\",\n                    \"menu:update\",\n                    \"menu:delete\",\n                    \"orders:create\",\n                    \"orders:read\",\n                    \"orders:update\",\n                    \"analytics:read\",\n                    \"users:manage\"\n                ]\n            }\n        });\n        if (updateError) {\n            console.error(\"Error updating user:\", updateError);\n            throw new Error(\"Failed to update user. Error: \" + updateError.message);\n        }\n        console.log(\"Updated user metadata\");\n        // Refresh the session to apply changes\n        const { error: refreshError } = await supabase.auth.refreshSession();\n        if (refreshError) {\n            console.error(\"Error refreshing session:\", refreshError);\n            throw new Error(\"Failed to refresh session. Error: \" + refreshError.message);\n        }\n        console.log(\"Successfully refreshed session\");\n        // Final verification\n        const { data: finalCheck, error: finalCheckError } = await supabase.auth.getUser();\n        if (finalCheckError) {\n            console.error(\"Error in final verification:\", finalCheckError);\n            throw new Error(\"Failed final verification. Error: \" + finalCheckError.message);\n        }\n        console.log(\"Final user state:\", finalCheck);\n        return {\n            success: true,\n            message: \"Successfully set admin access\",\n            data: finalCheck\n        };\n    } catch (error) {\n        console.error(\"Error in setAdminAccess:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9hZG1pbi9zZXQtYWRtaW4udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7QUFFN0MsZUFBZUMsZUFBZUMsS0FBYTtJQUNoRCxNQUFNQyxXQUFXSCxrRUFBWUE7SUFDN0JJLFFBQVFDLEdBQUcsQ0FBQyxvQ0FBb0NIO0lBRWhELElBQUk7UUFDRixxREFBcUQ7UUFDckQsTUFBTSxFQUFFSSxNQUFNQyxVQUFVLEVBQUVDLE9BQU9DLGVBQWUsRUFBRSxHQUFHLE1BQU1OLFNBQ3hETyxJQUFJLENBQUMsU0FDTEMsTUFBTSxDQUFDLE1BQU07WUFBRUMsT0FBTztRQUFRLEdBQzlCQyxLQUFLLENBQUM7UUFFVCxJQUFJSixpQkFBaUI7WUFDbkJMLFFBQVFJLEtBQUssQ0FBQywrQkFBK0JDO1lBQzdDLE1BQU0sSUFBSUssTUFBTSx5Q0FBeUNMLGdCQUFnQk0sT0FBTztRQUNsRjtRQUVBLElBQUksQ0FBQ1IsY0FBY0EsV0FBV1MsTUFBTSxLQUFLLEdBQUc7WUFDMUMsTUFBTSxJQUFJRixNQUFNO1FBQ2xCO1FBRUFWLFFBQVFDLEdBQUcsQ0FBQyxzQkFBc0JFO1FBRWxDLHdCQUF3QjtRQUN4QixNQUFNLEVBQUVELE1BQU1XLFFBQVEsRUFBRVQsT0FBT1UsU0FBUyxFQUFFLEdBQUcsTUFBTWYsU0FDaERPLElBQUksQ0FBQyxTQUNMQyxNQUFNLENBQUMseUJBQ1BRLEVBQUUsQ0FBQyxRQUFRLFNBQ1hDLE1BQU07UUFFVCxJQUFJRixXQUFXO1lBQ2JkLFFBQVFJLEtBQUssQ0FBQyw2QkFBNkJVO1lBQzNDLE1BQU0sSUFBSUosTUFBTSxzQ0FBc0NJLFVBQVVILE9BQU87UUFDekU7UUFFQSxJQUFJLENBQUNFLFVBQVU7WUFDYixNQUFNLElBQUlILE1BQU07UUFDbEI7UUFFQVYsUUFBUUMsR0FBRyxDQUFDLHFCQUFxQlk7UUFFakMsaUNBQWlDO1FBQ2pDLE1BQU0sRUFBRVgsTUFBTSxFQUFFZSxJQUFJLEVBQUUsRUFBRWIsT0FBT2MsWUFB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LFFBQVFJLEtBQUssQ0FBQyxnQ0FBZ0NrQztZQUM5QyxNQUFNLElBQUk1QixNQUFNLHVDQUF1QzRCLGdCQUFnQjNCLE9BQU87UUFDaEY7UUFFQVgsUUFBUUMsR0FBRyxDQUFDLHFCQUFxQm9DO1FBRWpDLE9BQU87WUFDTEUsU0FBUztZQUNUNUIsU0FBUztZQUNUVCxNQUFNbUM7UUFDUjtJQUNGLEVBQUUsT0FBT2pDLE9BQU87UUFDZEosUUFBUUksS0FBSyxDQUFDLDRCQUE0QkE7UUFDMUMsTUFBTUE7SUFDUjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9hZG1pbi9zZXQtYWRtaW4udHM/NmZhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAL2xpYi9zdXBhYmFzZS9jbGllbnQnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXRBZG1pbkFjY2VzcyhlbWFpbDogc3RyaW5nKSB7XG4gIGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlQ2xpZW50KClcbiAgY29uc29sZS5sb2coJ1N0YXJ0aW5nIGFkbWluIGFjY2VzcyBzZXR1cCBmb3I6JywgZW1haWwpXG5cbiAgdHJ5IHtcbiAgICAvLyBGaXJzdCBjaGVjayBpZiB0aGUgcm9sZXMgdGFibGUgZXhpc3RzIGFuZCBoYXMgZGF0YVxuICAgIGNvbnN0IHsgZGF0YTogcm9sZXNDaGVjaywgZXJyb3I6IHJvbGVzQ2hlY2tFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCdyb2xlcycpXG4gICAgICAuc2VsZWN0KCdpZCcsIHsgY291bnQ6ICdleGFjdCcgfSlcbiAgICAgIC5saW1pdCgxKVxuXG4gICAgaWYgKHJvbGVzQ2hlY2tFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgcm9sZXMgdGFibGU6Jywgcm9sZXNDaGVja0Vycm9yKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gY2hlY2sgcm9sZXMgdGFibGUuIEVycm9yOiAnICsgcm9sZXNDaGVja0Vycm9yLm1lc3NhZ2UpXG4gICAgfVxuXG4gICAgaWYgKCFyb2xlc0NoZWNrIHx8IHJvbGVzQ2hlY2subGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JvbGVzIHRhYmxlIGlzIGVtcHR5LiBQbGVhc2UgcnVuIHRoZSBtaWdyYXRpb25zIGZpcnN0LicpXG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coJ1JvbGVzIHRhYmxlIGNoZWNrOicsIHJvbGVzQ2hlY2spXG5cbiAgICAvLyBHZXQgdGhlIG93bmVyIHJvbGUgSURcbiAgICBjb25zdCB7IGRhdGE6IHJvbGVEYXRhLCBlcnJvcjogcm9sZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgLmZyb20oJ3JvbGVzJylcbiAgICAgIC5zZWxlY3QoJ2lkLCBuYW1lLCBkZXNjcmlwdGlvbicpXG4gICAgICAuZXEoJ25hbWUnLCAnb3duZXInKVxuICAgICAgLnNpbmdsZSgpXG5cbiAgICBpZiAocm9sZUVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIG93bmVyIHJvbGU6Jywgcm9sZUVycm9yKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2V0IG93bmVyIHJvbGUuIEVycm9yOiAnICsgcm9sZUVycm9yLm1lc3NhZ2UpXG4gICAgfVxuXG4gICAgaWYgKCFyb2xlRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPd25lciByb2xlIG5vdCBmb3VuZC4gUGxlYXNlIHJ1biB0aGUgbWlncmF0aW9ucyBmaXJzdC4nKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdGb3VuZCBvd25lciByb2xlOicsIHJvbGVEYXRhKVxuXG4gICAgLy8gR2V0IHRoZSBjdXJyZW50IHVzZXIncyBzZXNzaW9uXG4gICAgY29uc3QgeyBkYXRhOiB7IHVzZXIgfSwgZXJyb3I6IHNlc3Npb25FcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5nZXRVc2VyKClcbiAgICBpZiAoc2Vzc2lvbkVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIHNlc3Npb246Jywgc2Vzc2lvbkVycm9yKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2V0IHNlc3Npb24uIEVycm9yOiAnICsgc2Vzc2lvbkVycm9yLm1lc3NhZ2UpXG4gICAgfVxuXG4gICAgaWYgKCF1c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGF1dGhlbnRpY2F0ZWQgdXNlciBmb3VuZC4gUGxlYXNlIGxvZyBpbiBhZ2Fpbi4nKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdHb3QgY3VycmVudCB1c2VyOicsIHVzZXIpXG5cbiAgICAvLyBDaGVjayBpZiB1c2VyIGV4aXN0cyBpbiB1c2VycyB0YWJsZVxuICAgIGNvbnN0IHsgZGF0YTogZXhpc3RpbmdVc2VyLCBlcnJvcjogY2hlY2tFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCd1c2VycycpXG4gICAgICAuc2VsZWN0KCdpZCcpXG4gICAgICAuZXEoJ2lkJywgdXNlci5pZClcbiAgICAgIC5zaW5nbGUoKVxuXG4gICAgaWYgKGNoZWNrRXJyb3IgJiYgY2hlY2tFcnJvci5jb2RlICE9PSAnUEdSU1QxMTYnKSB7IC8vIFBHUlNUMTE2IG1lYW5zIG5vIHJvd3MgcmV0dXJuZWRcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNoZWNraW5nIHVzZXIgZXhpc3RlbmNlOicsIGNoZWNrRXJyb3IpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjaGVjayB1c2VyIGV4aXN0ZW5jZS4gRXJyb3I6ICcgKyBjaGVja0Vycm9yLm1lc3NhZ2UpXG4gICAgfVxuXG4gICAgaWYgKCFleGlzdGluZ1VzZXIpIHtcbiAgICAgIC8vIENyZWF0ZSB1c2VyIHJlY29yZCBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAgICBjb25zdCB7IGVycm9yOiBjcmVhdGVFcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3VzZXJzJylcbiAgICAgICAgLmluc2VydChbeyBcbiAgICAgICAgICBpZDogdXNlci5pZCxcbiAgICAgICAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICAgICAgICByb2xlX2lkOiByb2xlRGF0YS5pZFxuICAgICAgICB9XSlcblxuICAgICAgaWYgKGNyZWF0ZUVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIHVzZXIgcmVjb3JkOicsIGNyZWF0ZUVycm9yKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgdXNlciByZWNvcmQuIEVycm9yOiAnICsgY3JlYXRlRXJyb3IubWVzc2FnZSlcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKCdDcmVhdGVkIG5ldyB1c2VyIHJlY29yZCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyB1c2VyJ3Mgcm9sZV9pZFxuICAgICAgY29uc3QgeyBlcnJvcjogdXBkYXRlUm9sZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgndXNlcnMnKVxuICAgICAgICAudXBkYXRlKHsgcm9sZV9pZDogcm9sZURhdGEuaWQgfSlcbiAgICAgICAgLmVxKCdpZCcsIHVzZXIuaWQpXG5cbiAgICAgIGlmICh1cGRhdGVSb2xlRXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgcm9sZV9pZDonLCB1cGRhdGVSb2xlRXJyb3IpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHVwZGF0ZSByb2xlX2lkLiBFcnJvcjogJyArIHVwZGF0ZVJvbGVFcnJvci5tZXNzYWdlKVxuICAgICAgfVxuICAgICAgY29uc29sZS5sb2coJ1VwZGF0ZWQgcm9sZV9pZCBpbiB1c2VycyB0YWJsZScpXG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHVzZXIncyBtZXRhZGF0YVxuICAgIGNvbnN0IHsgZXJyb3I6IHVwZGF0ZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLnVwZGF0ZVVzZXIoe1xuICAgICAgZGF0YTogeyBcbiAgICAgICAgcm9sZTogJ293bmVyJyxcbiAgICAgICAgcm9sZV9pZDogcm9sZURhdGEuaWQsXG4gICAgICAgIGlzQWRtaW46IHRydWUsXG4gICAgICAgIHBlcm1pc3Npb25zOiBbXG4gICAgICAgICAgJ21lbnU6Y3JlYXRlJyxcbiAgICAgICAgICAnbWVudTpyZWFkJyxcbiAgICAgICAgICAnbWVudTp1cGRhdGUnLFxuICAgICAgICAgICdtZW51OmRlbGV0ZScsXG4gICAgICAgICAgJ29yZGVyczpjcmVhdGUnLFxuICAgICAgICAgICdvcmRlcnM6cmVhZCcsXG4gICAgICAgICAgJ29yZGVyczp1cGRhdGUnLFxuICAgICAgICAgICdhbmFseXRpY3M6cmVhZCcsXG4gICAgICAgICAgJ3VzZXJzOm1hbmFnZSdcbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBpZiAodXBkYXRlRXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIHVzZXI6JywgdXBkYXRlRXJyb3IpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byB1cGRhdGUgdXNlci4gRXJyb3I6ICcgKyB1cGRhdGVFcnJvci5tZXNzYWdlKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdVcGRhdGVkIHVzZXIgbWV0YWRhdGEnKVxuXG4gICAgLy8gUmVmcmVzaCB0aGUgc2Vzc2lvbiB0byBhcHBseSBjaGFuZ2VzXG4gICAgY29uc3QgeyBlcnJvcjogcmVmcmVzaEVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLnJlZnJlc2hTZXNzaW9uKClcbiAgICBpZiAocmVmcmVzaEVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciByZWZyZXNoaW5nIHNlc3Npb246JywgcmVmcmVzaEVycm9yKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmVmcmVzaCBzZXNzaW9uLiBFcnJvcjogJyArIHJlZnJlc2hFcnJvci5tZXNzYWdlKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsbHkgcmVmcmVzaGVkIHNlc3Npb24nKVxuXG4gICAgLy8gRmluYWwgdmVyaWZpY2F0aW9uXG4gICAgY29uc3QgeyBkYXRhOiBmaW5hbENoZWNrLCBlcnJvcjogZmluYWxDaGVja0Vycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFVzZXIoKVxuXG4gICAgaWYgKGZpbmFsQ2hlY2tFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gZmluYWwgdmVyaWZpY2F0aW9uOicsIGZpbmFsQ2hlY2tFcnJvcilcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIGZpbmFsIHZlcmlmaWNhdGlvbi4gRXJyb3I6ICcgKyBmaW5hbENoZWNrRXJyb3IubWVzc2FnZSlcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnRmluYWwgdXNlciBzdGF0ZTonLCBmaW5hbENoZWNrKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBtZXNzYWdlOiAnU3VjY2Vzc2Z1bGx5IHNldCBhZG1pbiBhY2Nlc3MnLFxuICAgICAgZGF0YTogZmluYWxDaGVja1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiBzZXRBZG1pbkFjY2VzczonLCBlcnJvcilcbiAgICB0aHJvdyBlcnJvclxuICB9XG59IFxuIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudCIsInNldEFkbWluQWNjZXNzIiwiZW1haWwiLCJzdXBhYmFzZSIsImNvbnNvbGUiLCJsb2ciLCJkYXRhIiwicm9sZXNDaGVjayIsImVycm9yIiwicm9sZXNDaGVja0Vycm9yIiwiZnJvbSIsInNlbGVjdCIsImNvdW50IiwibGltaXQiLCJFcnJvciIsIm1lc3NhZ2UiLCJsZW5ndGgiLCJyb2xlRGF0YSIsInJvbGVFcnJvciIsImVxIiwic2luZ2xlIiwidXNlciIsInNlc3Npb25FcnJvciIsImF1dGgiLCJnZXRVc2VyIiwiZXhpc3RpbmdVc2VyIiwiY2hlY2tFcnJvciIsImlkIiwiY29kZSIsImNyZWF0ZUVycm9yIiwiaW5zZXJ0Iiwicm9sZV9pZCIsInVwZGF0ZVJvbGVFcnJvciIsInVwZGF0ZSIsInVwZGF0ZUVycm9yIiwidXBkYXRlVXNlciIsInJvbGUiLCJpc0FkbWluIiwicGVybWlzc2lvbnMiLCJyZWZyZXNoRXJyb3IiLCJyZWZyZXNoU2Vzc2lvbiIsImZpbmFsQ2hlY2siLCJmaW5hbENoZWNrRXJyb3IiLCJzdWNjZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/admin/set-admin.ts\n"));

/***/ })

});